class MovieRentingSystem {
public:
    map<pair<int,int>,int>Shop;
    unordered_map<int,set<pair<int,int>>>Movie;
    set<tuple<int,int,int>> rented;

    MovieRentingSystem(int n, vector<vector<int>>& entries) {
         for (auto &e : entries) {
            int shop=e[0], movie=e[1], price=e[2];
            Shop[{shop,movie}]=price;
            Movie[movie].insert({price, shop});
         }
    }
    
    vector<int> search(int movie) {
        vector<int> ans;
        auto& S=Movie[movie];
        int cnt=5;

        for (auto it=S.begin(); it!=S.end();it++) {
            if(cnt>0){
                ans.push_back(it->second);
                cnt--;
            }
            else if(cnt<=0){
                break;
            }
        }
        return ans;
    }
    
    void rent(int shop, int movie) {
        int price=Shop[{shop,movie}];
        Movie[movie].erase({price, shop});
        rented.insert({price, shop, movie});
    }
    
    void drop(int shop, int movie) {
        int price=Shop[{shop,movie}];
        Movie[movie].insert({price, shop});
        rented.erase({price, shop, movie});
    }
    
    vector<vector<int>> report() {
        vector<vector<int>> ans;
        int i=0;
        for (auto it=rented.begin(); it!=rented.end() && i<5; it++, i++) {
            auto [price, shop, movie]=*it;
            ans.push_back({shop, movie});
        }
        return ans;
    }
};

